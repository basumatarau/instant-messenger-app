 DROP SCHEMA IF EXISTS "instant-messenger-db-schema" CASCADE;

 CREATE SCHEMA "instant-messenger-db-schema" AUTHORIZATION postgres;

 COMMENT ON SCHEMA "instant-messenger-db-schema" IS 'instant messenger web application - vironit training project ';


-- Drop table

-- DROP TABLE "instant-messenger-db-schema".roles;

CREATE TABLE "instant-messenger-db-schema".roles (
	id serial NOT NULL,
	"name" varchar(150) NOT NULL,
	CONSTRAINT roles_pk PRIMARY KEY (id)
);

-- Drop table

-- DROP TABLE "instant-messenger-db-schema".users;

CREATE TABLE "instant-messenger-db-schema".users (
	id bigserial NOT NULL,
	firstname varchar(150) NULL,
	lastname varchar(150) NULL,
	nickname varchar(60) NOT NULL,
	email varchar(160) NOT NULL,
	passwordhash varchar(160) NOT NULL,
	enabled bool NOT NULL,
	CONSTRAINT users_pk PRIMARY KEY (id),
	CONSTRAINT users_fk FOREIGN KEY (id) REFERENCES "instant-messenger-db-schema".roles(id) ON UPDATE CASCADE
);
CREATE UNIQUE INDEX users_email_idx ON "instant-messenger-db-schema".users USING btree (email);

-- Drop table

-- DROP TABLE "instant-messenger-db-schema".chatroom_privileges;

CREATE TABLE "instant-messenger-db-schema".chatroom_privileges (
	id serial NOT NULL,
	"name" varchar(100) NOT NULL,
	CONSTRAINT chatroom_privileges_pk PRIMARY KEY (id)
);

-- Drop table

-- DROP TABLE "instant-messenger-db-schema".chatrooms;

CREATE TABLE "instant-messenger-db-schema".chatrooms (
	id bigserial NOT NULL,
	"name" varchar(150) NOT NULL,
	timecreated timestamp NOT NULL,
	public bool NOT NULL,
	CONSTRAINT chatrooms_pk PRIMARY KEY (id)
);

-- Drop table

-- DROP TABLE "instant-messenger-db-schema".contacts;

CREATE TABLE "instant-messenger-db-schema".contacts (
	id_owner int8 NOT NULL,
	id_person int8 NOT NULL,
	confirmed bool NOT NULL DEFAULT false,
	id bigserial NOT NULL,
	CONSTRAINT contacts_pk PRIMARY KEY (id),
	CONSTRAINT subscription_fk FOREIGN KEY (id_owner) REFERENCES "instant-messenger-db-schema".users(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT subscription_fk_1 FOREIGN KEY (id_person) REFERENCES "instant-messenger-db-schema".users(id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX contacts_id_owner_idx ON "instant-messenger-db-schema".contacts USING btree (id_owner);
CREATE INDEX contacts_id_person_idx ON "instant-messenger-db-schema".contacts USING btree (id_person, id_owner);

-- Drop table

-- DROP TABLE "instant-messenger-db-schema".imagemessageresources;

CREATE TABLE "instant-messenger-db-schema".imagemessageresources (
	id bigserial NOT NULL,
	imagebin bytea NOT NULL,
	width int4 NOT NULL,
	height int4 NOT NULL,
	CONSTRAINT imagemessageresources_pk PRIMARY KEY (id)
);

-- Drop table

-- DROP TABLE "instant-messenger-db-schema".messages;

CREATE TABLE "instant-messenger-db-schema".messages (
	id bigserial NOT NULL,
	body varchar(500) NOT NULL,
	timesent timestamp NOT NULL,
	id_contact int8 NULL,
	id_author int8 NOT NULL,
	messagetype varchar(45) NOT NULL,
	id_messageresource int8 NOT NULL DEFAULT 0,
	id_chatroom int8 NULL,
	CONSTRAINT message_pk PRIMARY KEY (id),
	CONSTRAINT private_messages_fk FOREIGN KEY (id_contact) REFERENCES "instant-messenger-db-schema".contacts(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT private_messages_fk1 FOREIGN KEY (id_author) REFERENCES "instant-messenger-db-schema".users(id) ON UPDATE CASCADE,
	CONSTRAINT private_messages_fk3 FOREIGN KEY (id_chatroom) REFERENCES "instant-messenger-db-schema".chatrooms(id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE INDEX message_timesent_idx ON "instant-messenger-db-schema".messages USING btree (timesent);
CREATE INDEX private_messages_id_author_idx ON "instant-messenger-db-schema".messages USING btree (id_author);

-- Drop table

-- DROP TABLE "instant-messenger-db-schema".subscribers;

CREATE TABLE "instant-messenger-db-schema".subscribers (
	id_chatroom int8 NOT NULL,
	id_user int8 NOT NULL,
	id_userprivilege int4 NOT NULL DEFAULT 0,
	id bigserial NOT NULL,
	enteredchat timestamp NOT NULL,
	CONSTRAINT subscribers_pk PRIMARY KEY (id),
	CONSTRAINT users_has_chatrooms_fk FOREIGN KEY (id_user) REFERENCES "instant-messenger-db-schema".users(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT users_has_chatrooms_fk_1 FOREIGN KEY (id_chatroom) REFERENCES "instant-messenger-db-schema".chatrooms(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT users_has_chatrooms_fk_3 FOREIGN KEY (id_chatroom) REFERENCES "instant-messenger-db-schema".chatroom_privileges(id) ON UPDATE CASCADE ON DELETE SET DEFAULT
);

-- Drop table

-- DROP TABLE "instant-messenger-db-schema".messageresource;

CREATE TABLE "instant-messenger-db-schema".messageresource (
	id bigserial NOT NULL,
	id_message int8 NOT NULL,
	CONSTRAINT messageresource_pk PRIMARY KEY (id),
	CONSTRAINT messageresource_fk FOREIGN KEY (id_message) REFERENCES "instant-messenger-db-schema".messages(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT messageresource_fk1 FOREIGN KEY (id) REFERENCES "instant-messenger-db-schema".imagemessageresources(id) ON UPDATE CASCADE ON DELETE CASCADE
);
